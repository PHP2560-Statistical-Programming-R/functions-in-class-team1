some_normals <- rnorm(100,mean=7,sd=5)
mean(some_normals)
(formula_se_of_mean <- sd(some_normals)/sqrt(length(some_normals)))
all.equal(formula_se_of_mean, mean.jackknife(some_normals))
gamma.est <- function(the_data) {
m <- mean(the_data)
v <- var(the_data)
a <- m^2/v
s <- v/m
return(c(a=a,s=s))
}
gamma.jackknife <- function(a_vector) {
n = length(a_vector)
estimate_a=c(n)
estimate_s=c(n)
for(i in 1:n){
estimate_a[i]=gamma.est(a_vector[-i])[1]
estimate_s[i]=gamma.est(a_vector[-i])[2]
}
standard_error_a=sqrt((var(estimate_a))*((n-1)^2)/n)
standard_error_s=sqrt((var(estimate_s))*((n-1)^2)/n)
jackknife.stderrs=c(standard_error_a,standard_error_s)
return(jackknife.stderrs)
}
input <- rgamma(1000, shape=0.1, scale=10)
gamma.est(input)
gamma.jackknife(input)
jackknife.lm <- function(df,formula,p) {
n = nrow(df)
coef_list = matrix(nrow = n, ncol = p)
jackknife.stderr = vector(length = p)
for(i in 1:nrow(df)){
my.lm = lm(formula, data = df[-i,])
coef_list[i,] = coefficients(my.lm)
}
var = apply(coef_list, 2, var)
jackknife.stderr = sqrt(var*(n-1)^2/n)
return(jackknife.stderr)
}
output <- 1.2 + 0.6*input +  rnorm(1000, 0, 2.1)
data <- data.frame(output, input)
my.lm <- lm(output~input, data = data)
coefficients(my.lm)
# "Official" standard errors
sqrt(diag(vcov(my.lm)))
jackknife.lm(df=data,formula="output~input",p=2)
omit.case <- function(the_data,omitted_point) {
# This should take the data and omit one point at a time and return the new data
dim = data(the_data)
if (is.null(dim)||length(dim)==1){
return(the_data[-omitted_point])
}
else{
return(the_data[-omitted_point,])
}
}
jackknife <- function(estimator,the_data) {
if (is.null(dim(the_data))) { n <- length(the_data) }
else { n <- nrow(the_data) }
omit_and_est <- function(omit) {
estimator(omit.case(the_data,omit))
}
jackknife.ests <- matrix(sapply(1:n, omit_and_est), ncol=n)
var.of.reestimates <- apply(jackknife.ests,1,var)
jackknife.var <- ((n-1)^2/n)* var.of.reestimates
jackknife.stderr <- sqrt(jackknife.var)
return(jackknife.stderr)
}
jackknife(estimator = mean, the_data = some_normals)
all.equal(jackknife(estimator = mean,the_data = some_normals),
mean.jackknife(some_normals))
all.equal(jackknife(estimator=gamma.est,the_data=data$input),
gamma.jackknife(data$input))
all.equal(jackknife(estimator=gamma.est,the_data=data$input),
gamma.jackknife(data$input), check.names=FALSE)
est.coefs <- function(the_data) {
return(lm(output~input,data=the_data)$coefficients)
}
est.coefs(data)
all.equal(est.coefs(data), coefficients(my.lm))
jackknife(estimator=est.coefs,the_data=data)
all.equal(jackknife(estimator=est.coefs,the_data=data),
jackknife.lm(df=data,formula="output~input",p=2))
data_size <- function(the_data) {
if (is.null(dim(the_data))) { n <- length(the_data) }
else { n <- nrow(the_data) }
return(n)
}
scale_and_sqrt_vars <- function(jackknife.ests,n) {
var.of.reestimates <- apply(jackknife.ests,1,var)
jackknife.var <- ((n-1)^2/n)* var.of.reestimates
jackknife.stderr <- sqrt(jackknife.var)
return(jackknife.stderr)
}
jackknife <- function(estimator,the_data) {
n <- data_size(the_data)
omit_and_est <- function(omit) {
estimator(omit.case(the_data,omit))
}
jackknife.ests <- matrix(sapply(1:n, omit_and_est), ncol=n)
return(scale_and_sqrt_vars(jackknife.ests,n))
}
jackknife(estimator=est.coefs,the_data=data)
all.equal(jackknife(estimator=est.coefs,the_data=data),
jackknife.lm(df=data,formula="output~input",p=2))
jackknife.lm(df=data,formula="output~input",p=2)
jackknife(estimator=est.coefs,the_data=data)
jackknife <- function(estimator,the_data) {
if(is.null(dim(the_data))){n=length(the_data)}
else{n=nrow(the_data)}
omit_and_est <- function(omit) {
estimator(omit.case(the_data,omit))
}
jackknife.ests <- matrix(sapply(1:n, omit_and_est), ncol=n)
var.of.reestimates <- apply(jackknife.ests,1,var)
jackknife.var <- ((n-1)^2/n)* var.of.reestimates
jackknife.stderr <- sqrt(jackknife.var)
return(jackknife.stderr)
}
View(jackknife)
mean.jackknife <- function(a_vector) {
a<-rep(0,length(a_vector))
for (i in 1:length(a_vector)){
a[i]<-mean(a_vector[-i])
}
jackknife.variance<-((length(a_vector) - 1)/length(a_vector)) * sum((a - mean(a))^2)
jackknife.stderr<-sqrt(jackknife.variance)
return(jackknife.stderr)
}
some_normals <- rnorm(100,mean=7,sd=5)
mean(some_normals)
(formula_se_of_mean <- sd(some_normals)/sqrt(length(some_normals)))
all.equal(formula_se_of_mean, mean.jackknife(some_normals))
gamma.est <- function(the_data) {
m <- mean(the_data)
v <- var(the_data)
a <- m^2/v
s <- v/m
return(c(a=a,s=s))
}
gamma.jackknife <- function(a_vector) {
n = length(a_vector)
estimate_a=c(n)
estimate_s=c(n)
for(i in 1:n){
estimate_a[i]=gamma.est(a_vector[-i])[1]
estimate_s[i]=gamma.est(a_vector[-i])[2]
}
standard_error_a=sqrt((var(estimate_a))*((n-1)^2)/n)
standard_error_s=sqrt((var(estimate_s))*((n-1)^2)/n)
jackknife.stderrs=c(standard_error_a,standard_error_s)
return(jackknife.stderrs)
}
input <- rgamma(1000, shape=0.1, scale=10)
gamma.est(input)
gamma.jackknife(input)
jackknife.lm <- function(df,formula,p) {
n = nrow(df)
coef_list = matrix(nrow = n, ncol = p)
jackknife.stderr = vector(length = p)
for(i in 1:nrow(df)){
my.lm = lm(formula, data = df[-i,])
coef_list[i,] = coefficients(my.lm)
}
var = apply(coef_list, 2, var)
jackknife.stderr = sqrt(var*(n-1)^2/n)
return(jackknife.stderr)
}
output <- 1.2 + 0.6*input +  rnorm(1000, 0, 2.1)
data <- data.frame(output, input)
my.lm <- lm(output~input, data = data)
coefficients(my.lm)
# "Official" standard errors
sqrt(diag(vcov(my.lm)))
jackknife.lm(df=data,formula="output~input",p=2)
omit.case <- function(the_data,omitted_point) {
# This should take the data and omit one point at a time and return the new data
dim = data(the_data)
if (is.null(dim)||length(dim)==1){
return(the_data[-omitted_point])
}
else{
return(the_data[-omitted_point,])
}
}
jackknife <- function(estimator,the_data) {
if(is.null(dim(the_data))){n=length(the_data)}
else{n=nrow(the_data)}
omit_and_est <- function(omit) {
estimator(omit.case(the_data,omit))
}
jackknife.ests <- matrix(sapply(1:n, omit_and_est), ncol=n)
var.of.reestimates <- apply(jackknife.ests,1,var)
jackknife.var <- ((n-1)^2/n)* var.of.reestimates
jackknife.stderr <- sqrt(jackknife.var)
return(jackknife.stderr)
}
jackknife(estimator = mean, the_data = some_normals)
all.equal(jackknife(estimator = mean,the_data = some_normals),
mean.jackknife(some_normals))
all.equal(jackknife(estimator=gamma.est,the_data=data$input),
gamma.jackknife(data$input))
all.equal(jackknife(estimator=gamma.est,the_data=data$input),
gamma.jackknife(data$input), check.names=FALSE)
est.coefs <- function(the_data) {
return(lm(output~input,data=the_data)$coefficients)
}
est.coefs(data)
all.equal(est.coefs(data), coefficients(my.lm))
jackknife(estimator=est.coefs,the_data=data)
all.equal(jackknife(estimator=est.coefs,the_data=data),
jackknife.lm(df=data,formula="output~input",p=2))
data_size <- function(the_data) {
if (is.null(dim(the_data))) { n <- length(the_data) }
else { n <- nrow(the_data) }
return(n)
}
scale_and_sqrt_vars <- function(jackknife.ests,n) {
var.of.reestimates <- apply(jackknife.ests,1,var)
jackknife.var <- ((n-1)^2/n)* var.of.reestimates
jackknife.stderr <- sqrt(jackknife.var)
return(jackknife.stderr)
}
jackknife <- function(estimator,the_data) {
n <- data_size(the_data)
omit_and_est <- function(omit) {
estimator(omit.case(the_data,omit))
}
jackknife.ests <- matrix(sapply(1:n, omit_and_est), ncol=n)
return(scale_and_sqrt_vars(jackknife.ests,n))
}
jackknife(estimator=est.coefs,the_data=data)
jackknife.lm <- function(df,formula,p) {
n=nrow(df)
jackknife.ests = matrix(nrow=p, ncol=n)
for (i in 1:n){
new.coefficients = lm(as.formula(formula), data=df[-i,])$coefficients
jackknife.ests[,i ]=new.coefficients
}
var = apply(jackknife.ests, 1, var)
jackknife.var = (n-1)^2/n*var
jackknife.stderr = sqrt(jackknife.var)
return(jackknife.stderr)
}
jackknife.lm(df=data,formula="output~input",p=2)
jackknife <- function(estimator,the_data) {
n <- data_size(the_data)
omit_and_est <- function(omit) {
estimator(omit.case(the_data,omit))
}
jackknife.ests <- matrix(sapply(1:n, omit_and_est), ncol=n)
return(scale_and_sqrt_vars(jackknife.ests,n))
}
jackknife(estimator=est.coefs,the_data=data)
jackknife <- function(estimator,the_data) {
if (is.null(dim(the_data))) { n <- length(the_data) }
else { n <- nrow(the_data) }
omit_and_est <- function(omit) {
estimator(omit.case(the_data,omit))
}
jackknife.ests <- matrix(sapply(1:n, omit_and_est), ncol=n)
var.of.reestimates <- apply(jackknife.ests,1,var)
jackknife.var <- ((n-1)^2/n)* var.of.reestimates
jackknife.stderr <- sqrt(jackknife.var)
return(jackknife.stderr)
}
jackknife(estimator=est.coefs,the_data=data)
mean.jackknife = function(a_vector){
n = length(a_vector)
median_vector = vector(length = n)
for(i in 1:n){
median_vector[i] = mean(a_vector[-i], na.rm=T)
}
variance = var(median_vector)
jackknife.stderr = sqrt((n-1)^2/n*variance)
return(jackknife.stderr)
}
some_normals <- rnorm(100,mean=7,sd=5)
mean(some_normals)
(formula_se_of_mean <- sd(some_normals)/sqrt(length(some_normals)))
all.equal(formula_se_of_mean,mean.jackknife(some_normals))
gamma.est <- function(the_data) {
m <- mean(the_data)
v <- var(the_data)
a <- m^2/v
s <- v/m
return(c(a=a,s=s))
}
gamma.jackknife <- function(a_vector) {
n = length(a_vector)
parameter = matrix(nrow = n, ncol = 2)
for(i in 1:n){
parameter[i,] = gamma.est(a_vector[-i])
}
var = apply(parameter, 2, var)
jackknife.stderrs = sqrt(var*(n-1)^2/n)
return(jackknife.stderrs)
}
input <- rgamma(1000, shape=0.1, scale=10)
gamma.est(input)
gamma.jackknife(input)
jackknife.lm <- function(df,formula,p) {
n = nrow(df)
coef_list = matrix(nrow = n, ncol = p)
jackknife.stderr = vector(length = p)
for(i in 1:nrow(df)){
my.lm = lm(formula, data = df[-i,])
coef_list[i,] = coefficients(my.lm)
}
var = apply(coef_list, 2, var)
jackknife.stderr = sqrt(var*(n-1)^2/n)
return(jackknife.stderr)
}
output <- 1.2 + 0.6*input +  rnorm(1000, 0, 2.1)
data <- data.frame(output,input)
my.lm <- lm(output~input, data=data)
coefficients(my.lm)
# "Official" standard errors
sqrt(diag(vcov(my.lm)))
jackknife.lm(df=data,formula="output~input",p=2)
omit.case <- function(the_data,omitted_point) {
data_dim = dim(the_data)
if(is.null(data_dim) || length(data_dim)==1){
return(the_data[-omitted_point])
}
else{return(the_data[-omitted_point,])}
}
jackknife <- function(estimator,the_data) {
if (is.null(dim(the_data))) { n <- length(the_data) }
else { n <- nrow(the_data) }
omit_and_est <- function(omit) {
estimator(omit.case(the_data,omit))
}
jackknife.ests <- matrix(sapply(1:n, omit_and_est), ncol=n)
var.of.reestimates <- apply(jackknife.ests,1,var)
jackknife.var <- ((n-1)^2/n)* var.of.reestimates
jackknife.stderr <- sqrt(jackknife.var)
return(jackknife.stderr)
}
jackknife(estimator=mean,the_data=some_normals)
all.equal(jackknife(estimator=mean,the_data=some_normals),
mean.jackknife(some_normals))
all.equal(jackknife(estimator=gamma.est,the_data=data$input),
gamma.jackknife(data$input))
all.equal(jackknife(estimator=gamma.est,the_data=data$input),
gamma.jackknife(data$input), check.names=FALSE)
est.coefs <- function(the_data) {
return(lm(output~input,data=the_data)$coefficients)
}
est.coefs(data)
all.equal(est.coefs(data), coefficients(my.lm))
jackknife(estimator=est.coefs,the_data=data)
all.equal(jackknife(estimator=est.coefs,the_data=data),
jackknife.lm(df=data,formula="output~input",p=2))
data_size <- function(the_data) {
if (is.null(dim(the_data))) { n <- length(the_data) }
else { n <- nrow(the_data) }
return(n)
}
scale_and_sqrt_vars <- function(jackknife.ests,n) {
var.of.reestimates <- apply(jackknife.ests,1,var)
jackknife.var <- ((n-1)^2/n)* var.of.reestimates
jackknife.stderr <- sqrt(jackknife.var)
return(jackknife.stderr)
}
jackknife <- function(estimator,the_data) {
n <- data_size(the_data)
omit_and_est <- function(omit) {
estimator(omit.case(the_data,omit))
}
jackknife.ests <- matrix(sapply(1:n, omit_and_est), ncol=n)
return(scale_and_sqrt_vars(jackknife.ests,n))
}
jackknife(estimator=est.coefs,the_data=data)
omit.case <- function(the_data,omitted_point) {
# This should take the data and omit one point at a time and return the new data
dim = dim(the_data)
if (is.null(dim)||length(dim)==1){
return(the_data[-omitted_point])
}
else{
return(the_data[-omitted_point,])
}
}
omit_and_est <- function(omit) {
# This function should take the output of omit.case and use it as input for the estimator
estimator(omit.case(the_data,omit))
}
jackknife <- function(estimator,the_data) {
if(is.null(dim(the_data))){n=length(the_data)}
else{n=nrow(the_data)}
omit_and_est <- function(omit) {
estimator(omit.case(the_data,omit))
}
jackknife.ests <- matrix(sapply(1:n, omit_and_est), ncol=n)
var.of.reestimates <- apply(jackknife.ests,1,var)
jackknife.var <- ((n-1)^2/n)* var.of.reestimates
jackknife.stderr <- sqrt(jackknife.var)
return(jackknife.stderr)
}
mean.jackknife <- function(a_vector) {
a<-rep(0,length(a_vector))
for (i in 1:length(a_vector)){
a[i]<-mean(a_vector[-i])
}
jackknife.variance<-((length(a_vector) - 1)/length(a_vector)) * sum((a - mean(a))^2)
jackknife.stderr<-sqrt(jackknife.variance)
return(jackknife.stderr)
}
some_normals <- rnorm(100,mean=7,sd=5)
mean(some_normals)
(formula_se_of_mean <- sd(some_normals)/sqrt(length(some_normals)))
all.equal(formula_se_of_mean, mean.jackknife(some_normals))
gamma.est <- function(the_data) {
m <- mean(the_data)
v <- var(the_data)
a <- m^2/v
s <- v/m
return(c(a=a,s=s))
}
gamma.jackknife <- function(a_vector) {
n = length(a_vector)
estimate_a=c(n)
estimate_s=c(n)
for(i in 1:n){
estimate_a[i]=gamma.est(a_vector[-i])[1]
estimate_s[i]=gamma.est(a_vector[-i])[2]
}
standard_error_a=sqrt((var(estimate_a))*((n-1)^2)/n)
standard_error_s=sqrt((var(estimate_s))*((n-1)^2)/n)
jackknife.stderrs=c(standard_error_a,standard_error_s)
return(jackknife.stderrs)
}
input <- rgamma(1000, shape=0.1, scale=10)
gamma.est(input)
gamma.jackknife(input)
jackknife.lm <- function(df,formula,p) {
n=nrow(df)
jackknife.ests = matrix(nrow=p, ncol=n)
for (i in 1:n){
new.coefficients = lm(as.formula(formula), data=df[-i,])$coefficients
jackknife.ests[,i ]=new.coefficients
}
var = apply(jackknife.ests, 1, var)
jackknife.var = (n-1)^2/n*var
jackknife.stderr = sqrt(jackknife.var)
return(jackknife.stderr)
}
output <- 1.2 + 0.6*input +  rnorm(1000, 0, 2.1)
data <- data.frame(output, input)
my.lm <- lm(output~input, data = data)
coefficients(my.lm)
# "Official" standard errors
sqrt(diag(vcov(my.lm)))
jackknife.lm(df=data,formula="output~input",p=2)
omit.case <- function(the_data,omitted_point) {
# This should take the data and omit one point at a time and return the new data
dim = dim(the_data)
if (is.null(dim)||length(dim)==1){
return(the_data[-omitted_point])
}
else{
return(the_data[-omitted_point,])
}
}
jackknife <- function(estimator,the_data) {
if(is.null(dim(the_data))){n=length(the_data)}
else{n=nrow(the_data)}
omit_and_est <- function(omit) {
estimator(omit.case(the_data,omit))
}
jackknife.ests <- matrix(sapply(1:n, omit_and_est), ncol=n)
var.of.reestimates <- apply(jackknife.ests,1,var)
jackknife.var <- ((n-1)^2/n)* var.of.reestimates
jackknife.stderr <- sqrt(jackknife.var)
return(jackknife.stderr)
}
jackknife(estimator = mean, the_data = some_normals)
all.equal(jackknife(estimator = mean,the_data = some_normals),
mean.jackknife(some_normals))
all.equal(jackknife(estimator=gamma.est,the_data=data$input),
gamma.jackknife(data$input))
all.equal(jackknife(estimator=gamma.est,the_data=data$input),
gamma.jackknife(data$input), check.names=FALSE)
est.coefs <- function(the_data) {
return(lm(output~input,data=the_data)$coefficients)
}
est.coefs(data)
all.equal(est.coefs(data), coefficients(my.lm))
jackknife(estimator=est.coefs,the_data=data)
all.equal(jackknife(estimator=est.coefs,the_data=data),
jackknife.lm(df=data,formula="output~input",p=2))
data_size <- function(the_data) {
if (is.null(dim(the_data))) { n <- length(the_data) }
else { n <- nrow(the_data) }
return(n)
}
scale_and_sqrt_vars <- function(jackknife.ests,n) {
var.of.reestimates <- apply(jackknife.ests,1,var)
jackknife.var <- ((n-1)^2/n)* var.of.reestimates
jackknife.stderr <- sqrt(jackknife.var)
return(jackknife.stderr)
}
jackknife <- function(estimator,the_data) {
n <- data_size(the_data)
omit_and_est <- function(omit) {
estimator(omit.case(the_data,omit))
}
jackknife.ests <- matrix(sapply(1:n, omit_and_est), ncol=n)
return(scale_and_sqrt_vars(jackknife.ests,n))
}
savehistory("~/Dropbox (Brown)/GitHub/In_Calss HW 4/Jackknife of the Mean/Jackknife_function_R_Wei_Wang/Untitled.Rhistory")
